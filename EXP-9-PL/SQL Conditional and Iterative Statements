REM   Script: EX9_PLSQL
REM   PL sql statements

create table customer 
 
   (customer_name       varchar(15) not null unique, 
 
    customer_street     varchar(12) not null, 
 
    customer_city       varchar(15) not null, 
 
    primary key(customer_name));

create table customer 
 
   (customer_name       varchar(15) not null, 
 
    customer_street     varchar(12) not null, 
 
    customer_city       varchar(15) not null, 
 
    primary key(customer_name));

create table loan 
 
   (loan_number   varchar(15) not null, 
 
    branch_name         varchar(15) not null, 
 
    amount        number            not null, 
 
    primary key(loan_number));

create table depositor 
 
   (customer_name       varchar(15) not null, 
 
    account_number      varchar(15) not null, 
 
    primary key(customer_name, account_number), 
 
    foreign key(account_number) references account(account_number), 
 
    foreign key(customer_name) references customer(customer_name));

create table customer 
 
   (customer_name       varchar(15) not null, 
 
    customer_street     varchar(12) not null, 
 
    customer_city       varchar(15) not null, 
 
    primary key(customer_name));

create table loan 
 
   (loan_number   varchar(15) not null, 
 
    branch_name         varchar(15) not null, 
 
    amount        number            not null, 
 
    primary key(loan_number));

create table depositor 
 
   (customer_name       varchar(15) not null, 
 
    account_number      varchar(15) not null, 
 
    primary key(customer_name, account_number), 
 
    foreign key(account_number) references account(account_number), 
 
    foreign key(customer_name) references customer(customer_name));

create table borrower 
 
   (customer_name       varchar(15) not null, 
 
    loan_number   varchar(15) not null, 
 
    primary key(customer_name, loan_number), 
 
    foreign key(customer_name) references customer(customer_name), 
 
    foreign key(loan_number) references loan(loan_number));

create table depositor 
 
   (customer_name       varchar(15) not null, 
 
    account_number      varchar(15) not null, 
 
    primary key(customer_name, account_number), 
 
    foreign key(account_number) references account(account_number), 
 
    foreign key(customer_name) references customer(customer_name));

create table account 
 
   (account_number      varchar(15) not null unique, 
 
    branch_name         varchar(15) not null, 
 
    balance             number            not null, 
 
    primary key(account_number));

create table branch 
 
   (branch_name   varchar(15) not null unique, 
 
    branch_city   varchar(15) not null, 
 
    assets        number            not null, 
 
    primary key(branch_name));

create table account 
 
   (account_number      varchar(15) not null, 
 
    branch_name         varchar(15) not null, 
 
    balance             number            not null, 
 
    primary key(account_number));

create table branch 
 
   (branch_name   varchar(15) not null, 
 
    branch_city   varchar(15) not null, 
 
    assets        number            not null, 
 
    primary key(branch_name));

create table depositor 
 
   (customer_name       varchar(15) not null, 
 
    account_number      varchar(15) not null, 
 
    primary key(customer_name, account_number), 
 
    foreign key(account_number) references account(account_number), 
 
    foreign key(customer_name) references customer(customer_name));

insert into customer values ('Jones', 'Main', 'Harrison');

insert into customer values ('Smith', 'Main', 'Rye');

insert into customer values ('Hayes', 'Main', 'Harrison');

insert into customer values ('Curry', 'North', 'Rye');

insert into customer values ('Lindsay', 'Park', 'Pittsfield');

insert into customer values ('Turner', 'Putnam', 'Stamford');

insert into customer values ('Williams', 'Nassau', 'Princeton');

insert into customer values ('Adams', 'Spring', 'Pittsfield');

insert into customer values ('Johnson', 'Alma', 'Palo Alto');

insert into customer values ('Glenn', 'Sand Hill', 'Woodside');

insert into customer values ('Brooks', 'Senator', 'Brooklyn');

insert into customer values ('Green', 'Walnut', 'Stamford');

insert into customer values ('Jackson', 'University', 'Salt Lake');

insert into customer values ('Majeris', 'First', 'Rye');

insert into customer values ('McBride', 'Safety', 'Rye');

insert into branch values ('Downtown', 'Brooklyn', 900000);

insert into branch values ('Redwood', 'Palo Alto', 2100000);

insert into branch values ('Perryridge', 'Horseneck', 1700000);

insert into branch values ('Mianus', 'Horseneck', 400200);

insert into branch values ('Round Hill', 'Horseneck', 8000000);

insert into branch values ('Pownal', 'Bennington', 400000);

insert into branch values ('North Town', 'Rye', 3700000);

insert into branch values ('Brighton', 'Brooklyn', 7000000);

insert into branch values ('Central', 'Rye', 400280);

insert into account values ('A-101', 'Downtown', 500);

insert into account values ('A-215', 'Mianus', 700);

insert into account values ('A-102', 'Perryridge', 400);

insert into account values ('A-305', 'Round Hill', 350);

insert into account values ('A-201', 'Perryridge', 900);

insert into account values ('A-222', 'Redwood', 700);

insert into account values ('A-217', 'Brighton', 750);

insert into account values ('A-333', 'Central', 850);

insert into account values ('A-444', 'North Town', 625);

insert into depositor values ('Johnson','A-101');

insert into depositor values ('Smith', 'A-215');

insert into depositor values ('Hayes', 'A-102');

insert into depositor values ('Hayes', 'A-101');

insert into depositor values ('Turner', 'A-305');

insert into depositor values ('Johnson','A-201');

insert into depositor values ('Jones', 'A-217');

insert into depositor values ('Lindsay','A-222');

insert into depositor values ('Majeris','A-333');

insert into depositor values ('Smith', 'A-444');

insert into loan values ('L-17', 'Downtown', 1000);

insert into loan values ('L-23', 'Redwood', 2000);

insert into loan values ('L-15', 'Perryridge', 1500);

insert into loan values ('L-14', 'Downtown', 1500);

insert into loan values ('L-93', 'Mianus', 500);

insert into loan values ('L-11', 'Round Hill', 900);

insert into loan values ('L-16', 'Perryridge', 1300);

insert into loan values ('L-20', 'North Town', 7500);

insert into loan values ('L-21', 'Central', 570);

insert into borrower values ('Jones', 'L-17');

insert into borrower values ('Smith', 'L-23');

insert into borrower values ('Hayes', 'L-15');

insert into borrower values ('Jackson', 'L-14');

insert into borrower values ('Curry', 'L-93');

insert into borrower values ('Smith', 'L-11');

insert into borrower values ('Williams','L-17');

insert into borrower values ('Adams', 'L-16');

insert into borrower values ('McBride', 'L-20');

insert into borrower values ('Smith', 'L-21');

SELECT DISTINCT 
  customer_name 
FROM customer c 
INNER JOIN depositor d 
  ON d.customer_name=c.customer_name 
inner join accounts a on d.account_number = a.account_number 
 INNER JOIN borrower b 
  ON b.customer_name = c.customer_name 
INNER JOIN loan l 
  ON l.loan_number = b.loan_number 
WHERE l.branch_name = a.branch_name;

SELECT DISTINCT 
  customer_name 
FROM customer c 
INNER JOIN depositor d 
  ON d.customer_name=c.customer_name 
inner join account a on d.account_number = a.account_number 
 INNER JOIN borrower b 
  ON b.customer_name = c.customer_name 
INNER JOIN loan l 
  ON l.loan_number = b.loan_number 
WHERE l.branch_name = a.branch_name;

select distinct 
    customer_name 
    from borrower 
    where customer_name in(select customer_name from depositor));

select distinct 
    customer_name 
    from borrower 
    where customer_name in(select customer_name from depositor));

select distinct 
    customer_name 
    from borrower 
    where customer_name in(select customer_name from depositor));

desc borrower


select * borrower;

select * from borrower;

select distinct 
    b.customer_name 
    from borrower b 
    where b.customer_name in(select d.customer_name from depositor d));

select distinct 
    b. customer_name 
    from borrower b 
    where b.customer_name in(select d.customer_name from depositor d));

   select customer_name from borrower) 
       union all ( select customer_name from depositor);

   select customer_name from borrower) 
       union all (select customer_name from depositor);

   (select customer_name from borrower) 
       union all (select customer_name from depositor);

   (select customer_name from borrower) 
       union all (select customer_name from depositor);

   (select customer_name from borrower) 
       union all (select customer_name from depositor);

   (select customer_name from borrower) 
       union all (select customer_name from depositor);

 select distinct C.customer_name, customer_city 
 
   from customer C, borrower B, loan L 
 
   where C.customer_name = B.customer_name and 
 
      B.loan_number = L.loan_number;

 select distinct C.customer_name 
   from customer C, borrower B, loan L, depositor D, account A 
   where ((C.customer_name = B.customer_name and 
      B.loan_number = L.loan_number)AND (C.customer_name = D.customer_name and D.account_number = A.account_number));

 select C.customer_name 
   from customer C, borrower B, loan L, depositor D, account A 
   where ((C.customer_name = B.customer_name and 
      B.loan_number = L.loan_number)AND (C.customer_name = D.customer_name and D.account_number = A.account_number));

select customer_name  
    from depositor, account 
    where depositor.account_number = account.account_number);

select customer_name  
    from depositor, account 
    where (depositor.account_number = account.account_number) 
 
 
 
 
SELECT customer_name 
FROM loan 
JOIN account 
ON loans.customer_id = accounts.customer_id 
GROUP BY customer_name 
HAVING COUNT(DISTINCT loans.loan_id) > 0 AND COUNT(DISTINCT accounts.account_id) > 0;

select customer_name  
    from D depositor, account A 
    where (D.account_number = A.account_number) 
 
 
 
 
SELECT customer_name 
FROM loan 
JOIN account 
ON loans.customer_id = accounts.customer_id 
GROUP BY customer_name 
HAVING COUNT(DISTINCT loans.loan_id) > 0 AND COUNT(DISTINCT accounts.account_id) > 0;

select customer_name  
    from D depositor join account A 
    where (D.account_number = A.account_number) 
 
 
 
 
SELECT customer_name 
FROM loan 
JOIN account 
ON loans.customer_id = accounts.customer_id 
GROUP BY customer_name 
HAVING COUNT(DISTINCT loans.loan_id) > 0 AND COUNT(DISTINCT accounts.account_id) > 0;

select customer_name  
    from D depositor join account A 
    where D.account_number = A.account_number 
 
 
 
 
SELECT customer_name 
FROM loan 
JOIN account 
ON loans.customer_id = accounts.customer_id 
GROUP BY customer_name 
HAVING COUNT(DISTINCT loans.loan_id) > 0 AND COUNT(DISTINCT accounts.account_id) > 0;

select customer_name  
    from D depositor join account A 
    where D.account_number = A.account_number 
    group by customer_name 
 
 
 
 
SELECT customer_name 
FROM loan 
JOIN account 
ON loans.customer_id = accounts.customer_id 
GROUP BY customer_name 
HAVING COUNT(DISTINCT loans.loan_id) > 0 AND COUNT(DISTINCT accounts.account_id) > 0;

select customer_name  
    from D depositor , account A 
    where D.account_number = A.account_number 
    group by customer_name 
 
 
 
 
SELECT customer_name 
FROM loan 
JOIN account 
ON loans.customer_id = accounts.customer_id 
GROUP BY customer_name 
HAVING COUNT(DISTINCT loans.loan_id) > 0 AND COUNT(DISTINCT accounts.account_id) > 0;

select customer_name  
    from D depositor JOIN account A 
    where D.account_number = A.account_number 
    group by customer_name 
 
 
 
 
SELECT customer_name 
FROM loan 
JOIN account 
ON loans.customer_id = accounts.customer_id 
GROUP BY customer_name 
HAVING COUNT(DISTINCT loans.loan_id) > 0 AND COUNT(DISTINCT accounts.account_id) > 0;

select customer_name  
    from D depositor JOIN account A 
    ON D.account_number = A.account_number 
    group by customer_name 
 
 
 
 
SELECT customer_name 
FROM loan 
JOIN account 
ON loans.customer_id = accounts.customer_id 
GROUP BY customer_name 
HAVING COUNT(DISTINCT loans.loan_id) > 0 AND COUNT(DISTINCT accounts.account_id) > 0;

SELECT customer_name 
FROM loan 
JOIN account 
ON loan.branch_name = account.branch_name  
GROUP BY customer_name 
 
 
 
 
SELECT customer_name 
FROM loan 
JOIN account 
ON loans.customer_id = accounts.customer_id 
GROUP BY customer_name 
HAVING COUNT(DISTINCT loans.loan_id) > 0 AND COUNT(DISTINCT accounts.account_id) > 0;

SELECT DISTINCT d.customer_name 
FROM depositor d 
JOIN account a ON d.account_number = a.account_number 
JOIN borrower b ON d.customer_name = b.customer_name 
JOIN loan l ON b.loan_number = l.loan_number AND a.branch_name = l.branch_name;

SELECT customer_name 
FROM loan 
JOIN account 
ON loans.customer_id = accounts.customer_id 
GROUP BY customer_name 
HAVING COUNT(DISTINCT loans.loan_id) > 0 AND COUNT(DISTINCT accounts.account_id) > 0;

SELECT DISTINCT b.customer_name 
FROM borrower b 
JOIN loan l ON b.loan_number = l.loan_number 
WHERE NOT EXISTS ( 
  SELECT * 
  FROM depositor d 
  WHERE d.customer_name = b.customer_name 
);

SELECT customer_name 
FROM loan 
JOIN account 
ON loans.customer_id = accounts.customer_id 
GROUP BY customer_name 
HAVING COUNT(DISTINCT loans.loan_id) > 0 AND COUNT(DISTINCT accounts.account_id) > 0;

SELECT DISTINCT b.customer_name 
FROM borrower b 
JOIN loan l ON b.loan_number = l.loan_number 
WHERE NOT EXISTS ( 
  SELECT * 
  FROM depositor d 
  WHERE d.customer_name = b.customer_name 
);

SELECT customer_name 
FROM ( 
  SELECT customer_name 
  FROM depositor 
  UNION ALL 
  SELECT customer_name 
  FROM borrower 
) AS cust 
GROUP BY customer_name 
HAVING COUNT(*) > 1;

SELECT customer_name 
FROM ( 
  SELECT customer_name 
  FROM depositor 
  UNION ALL 
  SELECT customer_name 
  FROM borrower 
) AS cust 
GROUP BY customer_name 
HAVING COUNT(*) > 1;

SELECT customer_name 
FROM ( 
  SELECT customer_name 
  FROM depositor 
  UNION ALL 
  SELECT customer_name 
  FROM borrower 
) AS cust 
GROUP BY customer_name 
HAVING COUNT(*) > 1;

SELECT customer_name 
FROM ( 
  SELECT customer_name 
  FROM depositor 
  UNION ALL 
  SELECT customer_name 
  FROM borrower 
) AS cust 
GROUP BY customer_name 
;

SELECT customer_name 
FROM ( 
  SELECT customer_name 
  FROM depositor 
  UNION ALL 
  SELECT customer_name 
  FROM borrower 
) AS cust 
GROUP BY customer_name 
HAVING COUNT(*) > 1;

SELECT customer_name 
FROM ( 
  SELECT customer_name 
  FROM depositor 
  UNION ALL 
  SELECT customer_name 
  FROM borrower 
) AS cust 
GROUP BY customer_name 
HAVING COUNT(*) > 1;

SELECT customer_name 
FROM (SELECT customer_name 
  FROM depositor) 
  UNION ALL 
  (SELECT customer_name 
  FROM borrower) 
AS cust 
GROUP BY customer_name 
HAVING COUNT(*) > 1;

SELECT customer_name 
FROM ((SELECT customer_name 
  FROM depositor) 
  UNION ALL 
  (SELECT customer_name 
  FROM borrower) 
)AS cust 
GROUP BY customer_name 
HAVING COUNT(*) > 1;

SELECT customer_name 
FROM ((SELECT customer_name 
  FROM depositor) 
  UNION ALL 
  (SELECT customer_name 
  FROM borrower) 
)AS cust 
GROUP BY customer_name 
HAVING COUNT(*)>1;

SELECT count,customer_name 
FROM ((SELECT customer_name 
  FROM depositor) 
  UNION ALL 
  (SELECT customer_name 
  FROM borrower) 
)AS cust 
GROUP BY customer_name 
HAVING COUNT(*)>1;

SELECT count,customer_name 
FROM ((SELECT customer_name 
  FROM depositor) 
  UNION ALL 
  (SELECT customer_name 
  FROM borrower) 
)AS cust 
GROUP BY customer_name 
HAVING COUNT(*)>1;

select * from dbo.emp;

CREATE TABLE emp (  
    empno   NUMBER(4) PRIMARY KEY,  
    ename   VARCHAR2(10),  
    job     VARCHAR2(9),  
    mgr     NUMBER(4),  
    hiredate DATE,  
    sal     NUMBER(7,2),  
    comm    NUMBER(7,2),  
    deptno  NUMBER(2)  
);

INSERT INTO emp VALUES (7369, 'SMITH', 'CLERK', 7902, TO_DATE('17-DEC-80', 'DD-MON-YY'), 800, 7499, 20);

INSERT INTO emp VALUES(7499, 'ALLEN', 'SALESMAN', 7698, TO_DATE('20-FEB-81', 'DD-MON-YY'), 1600, 7521, 30);

INSERT INTO emp VALUES(7521, 'WARD', 'SALESMAN', 7698, TO_DATE('22-FEB-81', 'DD-MON-YY'), 1250, 300, 30);

INSERT INTO emp VALUES(7566, 'JONES', 'MANAGER', 7839, TO_DATE('02-APR-81', 'DD-MON-YY'), 2975, NULL, 20);

INSERT INTO emp VALUES(7654, 'MARTIN', 'SALESMAN', 7698, TO_DATE('28-SEP-81', 'DD-MON-YY'), 1250, 1400, 30);

INSERT INTO emp VALUES(7698, 'BLAKE', 'MANAGER', 7839, TO_DATE('01-MAY-81', 'DD-MON-YY'), 2850, NULL, 30);

INSERT INTO emp VALUES(7782, 'CLARK', 'MANAGER', 7839, TO_DATE('09-JUN-81', 'DD-MON-YY'), 2450, NULL, 10);

INSERT INTO emp VALUES(7788, 'SCOTT', 'ANALYST', 7566, TO_DATE('19-APR-87', 'DD-MON-YY'), 3000, NULL, 20);

INSERT INTO emp VALUES(7839, 'KING', 'PRESIDENT', NULL, TO_DATE('17-NOV-81', 'DD-MON-YY'), 5000, NULL, 10);

INSERT INTO emp VALUES(7844, 'TURNER', 'SALESMAN', 7698, TO_DATE('08-SEP-81', 'DD-MON-YY'), 1500, 0, 30);

INSERT INTO emp VALUES(7876, 'ADAMS', 'CLERK', 7788, TO_DATE('23-MAY-87', 'DD-MON-YY'), 1100, NULL, 20);

INSERT INTO emp VALUES(7900, 'JAMES', 'CLERK', 7698, TO_DATE('03-DEC-81', 'DD-MON-YY'), 950, NULL, 30);

INSERT INTO emp VALUES(7902, 'FORD', 'ANALYST', 7566, TO_DATE('03-DEC-81', 'DD-MON-YY'), 3000, NULL, 20);

INSERT INTO emp VALUES(7934, 'MILLER', 'CLERK', 7782, TO_DATE('23-JAN-82', 'DD-MON-YY'), 1300, NULL, 10);

create view empv10 as select empno,ename,job from emp 
where deptno=10;

desc empv10


select * from empv10;

update empv10 set sal=sal+0.10*sal 
where job='CLERK';

select * from empv30;

create view empv30 as  
    select empno,ename,sal from emp 
    where deptno=30;

create view empv30 as  
    select empno,ename,sal from emp 
    where deptno=30;

select * from empv30;

create view empv10 as  
    select empno,ename,sal,job from emp 
    where job='CLERK';

create view empv10 as  
    select empno,ename,sal from emp 
    where job='CLERK';

create view empv11 as  
    select empno,ename,sal from emp 
    where job='CLERK';

select * from empv11;

update empv11 set sal =sal+0.10*sal 
    where job='CLERK';

create view empv12 as  
    select empno,ename,sal,job from emp 
    where job='CLERK';

select * from empv12;

update empv12 set sal =sal+0.10*sal 
    where job='CLERK';

select * from empno,ename,job,sal from emp;

select * from empno,ename,job,sal from empv12;

select empno,ename,job,sal from emp;

select * from empv10;

select * from empv11;

select * from empv12;

create or replace view empv12 
    (employee_no,employee_name,job,salary) as  
    select empno,ename,job,sal from emp where deptno=10;

select * from empv12;

create view pay as 
    select ename,monthly_sal,annual_sal,deptno from emp;

select * from emp;

  select ename,sal as monthly_sal,deptno from emp;

 select ename,sal as monthly_sal, sal*12 as annual_sal, deptno from emp;

create view pay as 
        select ename,sal as monthly_sal, sal*12 as annual_sal, deptno from emp;

select * from pay;

select * from empv20;

create or replace view empv20 as 
        select * from emp where deptno=20 
    with check option constraint empv20_ck;

select * from empv20;

select * from empv10;

create or replace view empv10 as 
        select * from emp where deptno=20 
    with read only;

select * from empv10;

select * from empv20;

select * from empv20;

update empv12 set sal =sal+0.10*sal 
    where job='CLERK';

select empno,ename,job,sal from emp;

drop view empv20;

